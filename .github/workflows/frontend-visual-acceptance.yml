name: Visual acceptance tests
on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      short-name:
        required: true
        type: string
      node-version:
        required: true
        type: string
      image-name-prefix:
        required: true
        type: string
      image-tag:
        required: true
        type: string
      storybook:
        required: true
        type: boolean

defaults:
  run:
    working-directory: ./frontend

env:
  CYPRESS_A11Y: true

jobs:

  visual-acceptance-tests:
    name: ${{ inputs.name }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Load images
        if: ${{ inputs.storybook == false || inputs.storybook == 'false' || inputs.storybook == null }}
        run: |
          docker pull ${{ inputs.image-name-prefix }}-backend:${{ inputs.image-tag }}
          docker pull ${{ inputs.image-name-prefix }}-frontend:${{ inputs.image-tag }}
          docker image ls -a


      # https://fxdx.dev/webdriver-bidi-becomes-the-default-for-cypress-in-firefox/
      - name: Configure Firefox 140.0
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: "140.0"
      - name: Test Firefox version
        run: |
         firefox --version

      - uses: actions/download-artifact@v4
        if: ${{ inputs.storybook == true || inputs.storybook == 'true' }}
        with:
          name: storybook-build
          path: frontend/storybook-build

      - name: Use Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Enable corepack
        run: npm i -g corepack@latest && corepack enable

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: make install

      - name: Cache Cypress Binary
        id: cache-cypress-binary
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: binary-${{ inputs.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install Cypress if not in cache
        if: steps.cache-cypress-binary.outputs.cache-hit != 'true'
        working-directory: ./frontend/core/packages/volto
        run: make cypress-install

      - uses: JarvusInnovations/background-action@v1
        if: ${{ inputs.storybook == false || inputs.storybook == 'false' || inputs.storybook == null }}
        name: Start Servers - Volto and Plone
        with:
          run: |
            docker run -i --net=host --rm --name=backend ${{ inputs.image-name-prefix }}-backend:${{ inputs.image-tag }} &
            docker run -i --net=host --rm --name=frontend ${{ inputs.image-name-prefix }}-frontend:${{ inputs.image-tag }} &
          # your step-level and job-level environment variables are available to your commands as-is
          # npm install will count towards the wait-for timeout
          # whenever possible, move unrelated scripts to a different step
          # to background multiple processes: add & to the end of the command

          wait-on: |
            http-get://localhost:8080/Plone
            http://localhost:3000
          # IMPORTANT: to use environment variables in wait-on, you must use this form: ${{ env.VAR }}
          # See wait-on section below for all resource types and prefixes

          tail: true # true = stderr,stdout
          # This will allow you to monitor the progress live

          log-output-resume: stderr
          # Eliminates previosuly output stderr log entries from post-run output

          wait-for: 10m

          log-output: stderr,stdout # same as true

          log-output-if: failure
          # failure = exit-early or timeout

          # working-directory: backend

      - uses: JarvusInnovations/background-action@v1
        if: ${{ inputs.storybook == true || inputs.storybook == 'true' }}
        name: Start Servers - Storybook
        with:
          run: |
            python3 -m http.server 6006 -d frontend/storybook-build &
          wait-on: |
            http://localhost:6006
          tail: true # true = stderr,stdout
          log-output-resume: stderr
          wait-for: 10m
          log-output: stderr,stdout # same as true
          log-output-if: failure

      - name: Run tests
        if: ${{ inputs.storybook == false || inputs.storybook == 'false' || inputs.storybook == null }}
        run: make ci-acceptance-test-visual SPEC='cypress/tests/visual/${{ inputs.short-name }}.cy.{js,jsx,ts,tsx}'

      - name: Run tests Storybook
        # must be in the storybook directory
        if: ${{ inputs.storybook == true || inputs.storybook == 'true' }}
        run: make ci-acceptance-test-visual-storybook SPEC='cypress/tests/visual/storybook/${{ inputs.short-name }}.cy.{js,jsx,ts,tsx}'

      # Upload Cypress screenshots
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-visual-acceptance-${{ inputs.short-name }}
          path: frontend/cypress/screenshots
          retention-days: 2

      # Upload Cypress videos
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos-visual-acceptance-${{ inputs.short-name }}
          path: frontend/cypress/videos
          retention-days: 2

      # Upload Cypress visual testing screenshots
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-image-snapshots-visual-acceptance-${{ inputs.short-name }}
          path: frontend/cypress/__image_snapshots__
          retention-days: 2
